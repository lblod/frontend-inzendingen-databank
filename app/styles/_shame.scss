/* ==========================================================================
   #SHAME
   Dirty temporary css for demo purposes.
   Some parts will be reused, but most of them will not.
   ========================================================================== */

/* ==========================================================================
  Style power select sizes
 ========================================================================== */

.ember-power-select--small .ember-power-select-trigger {
  font-size: 1.4rem;
  height: 3rem;
  line-height: 2;
  padding-left: 0.5rem;
} // remove when webunversum is updated

.ember-power-select-option {
  line-height: 2.2rem;
  padding: 1rem 0 1rem 3rem;
} // remove when webunversum is updated


/* ==========================================================================
  Layout – redefine layout and breakpoints for smaller screens
 ========================================================================== */

  // Breakpoints
  // ---
  $mq-breakpoints: (
    xsmall: 500px,
    small: 767px,
    medium: 1023px,
    large: 1280px
  );


  /* ==========================================================================
     #WIDTHS
     ========================================================================== */

  /**
   * Appuniversum generates a series of utility classes that give a fluid width to
   * whichever element they’re applied, e.g.:
   *
   *   <img src="" alt="" class="au-u-1-2" />
   *
   * These classes are most commonly used in conjunction with our layout system,
   * e.g.:
   *
   *   <div class="au-o-grid__item  au-u-1-2">
   *
   * By default, Appuniversum will also generate responsive variants of each of these
   * classes by using your Sass MQ configuration, e.g.:
   *
   *   <div class="au-o-grid__item  au-u-1-1  u-1-2@medium  u-1-3@large">
   *
   * Optionally, Appuniversum can generate offset classes which can push and pull
   * elements left and right by a specified amount, e.g.:
   *
   *   <div class="au-o-grid__item  au-u-2-3  au-u-pull-1-3">
   *
   * This is useful for making very granular changes to the rendered order of
   * items in a layout.
   *
   * N.B. This option is turned off by default.
   */

  /* Variables
    ========================================================================== */

  // Which fractions would you like in your grid system(s)? By default, Appuniversum
  // provides you fractions of one whole, halves, thirds, quarters and fifths,
  // e.g.:
  //
  //   .au-u-1-2
  //   .au-u-2-5
  //   .au-u-3-4
  //   .au-u-2-3

  $au-fractions: 1 2 3 4 5 !default;

  // Optionally, Appuniversum can generate classes to offset items by a certain width.
  // Would you like to generate these types of class as well? E.g.:
  //
  //   .au-u-push-1-3
  //   .au-u-pull-2-4
  //   .au-u-pull-1-5
  //   .au-u-push-2-3

  $au-offsets: false !default;

  // By default, Appuniversum uses fractions-like classes like `<div class="u-1/4">`.
  // You can change the `/` to whatever you fancy with this variable.
  $au-widths-delimiter: "-" !default;

  // When using Sass-MQ, this defines the separator for the breakpoints suffix
  // in the class name. By default, we are generating the responsive suffixes
  // for the classes with a `@` symbol so you get classes like:
  // <div class="au-u-3-12@small">
  $au-widths-breakpoint-separator: \@ !default;



  /* Generate utility classes
    ========================================================================== */

  // A mixin to spit out our width classes. Pass in the columns we want the widths
  // to have, and an optional suffix for responsive widths. E.g. to create thirds
  // and quarters for a small breakpoint:
  //
  // @include widths(3 4, -sm);

  @mixin au-widths($columns, $breakpoint: null) {
    // Loop through the number of columns for each denominator of our fractions.
    @each $denominator in $columns {
      // Begin creating a numerator for our fraction up until we hit the
      // denominator.
      @for $numerator from 1 through $denominator {

        // Build a class in the format `.u-3/4[@<breakpoint>]`.
        .au-u-#{$numerator}#{$au-widths-delimiter}#{$denominator}#{$breakpoint} {
          width: ($numerator / $denominator) * 100% !important;
        }

        @if ($au-offsets == true) {
          /**
           * 1. Reset any leftover or conflicting `left`/`right` values.
           */

          // Build a class in the format `.u-push-1/2[@<breakpoint>]`.
          .au-u-push-#{$numerator}#{$au-widths-delimiter}#{$denominator}#{$breakpoint} {
            position: relative !important;
            right: auto !important; /* [1] */
            left: ($numerator / $denominator) * 100% !important;
          }

          // Build a class in the format `.u-pull-5/6[@<breakpoint>]`.
          .au-u-pull-#{$numerator}#{$au-widths-delimiter}#{$denominator}#{$breakpoint} {
            position: relative !important;
            right: ($numerator / $denominator) * 100% !important;
            left: auto !important; /* [1] */
          }
        }
      }
    }

    @if ($au-offsets == true and $breakpoint != null) {
      // Create auto push and pull classes.
      .au-u-push-none#{$breakpoint} {
        left: auto !important;
      }

      .au-u-pull-none#{$breakpoint} {
        right: auto !important;
      }
    }
  }

  /* Generate utility classes
    ========================================================================== */

  /**
   * A series of width helper classes that you can use to size things like grid
   * systems. Classes take a fraction-like format (e.g. `.au-u-2-3`). Use these in
   * your markup:
   *
   * <div class="au-u-7-12">
   *
   * The following will generate widths helper classes based on the fractions
   * defined in the `$au-fractions` list.
   */

  @include au-widths($au-fractions);

  /**
   * If we’re using Sass-MQ, automatically generate grid system(s) for each of our
   * defined breakpoints, and give them a Responsive Suffix, e.g.:
   *
   * <div class="au-u-3-12@small">
   */

  @if (variable-exists(mq-breakpoints)) {
    @each $au-bp-name, $au-bp-value in $mq-breakpoints {
      @include mq($from: $au-bp-name) {
        @include au-widths($au-fractions, #{$au-widths-breakpoint-separator}#{$au-bp-name});
      }
    }
  }

/* ==========================================================================
  sidebar-container layout
 ========================================================================== */

  .au-c-main-container {
    height: 100%;
  }

  .au-c-main-container {

    @include mq($until: large) {
      overflow: scroll;
    }
  }

  .au-c-main-container__content {
    flex-basis: 100%;

    @include mq($until: large) {
      overflow: visible;
      height: auto;
    }

    @include mq($from: large) {
      height: 100%;
      flex-basis: 0;
      flex-grow: 999;
    }
  }

  .au-c-main-container__sidebar {
    flex-basis: 100%;

    @include mq($until: large) {
      overflow: visible;
      height: auto;
    }

    @include mq($from: large) {
      flex-basis: 35rem;
      height: 100%;
    }
  }

/* ==========================================================================
  utilities
 ========================================================================== */

.au-u-border-bottom {
  border-bottom: .1rem solid $au-gray-300;
}

.au-c-hr {
  margin: $au-unit 0;
  border: none;
  border-bottom: 1px solid $au-gray-300;
}


/* ==========================================================================
  Date range
 ========================================================================== */

.date-range__group {
  width: 100%;
  float: none;
  margin: $au-unit-small 0;
}

.date-range__group+.date-range__group {
  margin-left: 0;
}

.date-range__label {
  width: 4rem;
}


// Fix ACMIDM login alerts/loading in header
// @TODO: rework ACMIDM components to work with appuniversum classes
.au-c-main-header__actions .alert {
  position: absolute;
  right: $au-unit-small;
  max-width: 480px;
  top: $au-unit-large + $au-unit-tiny;
}

// Position ACMIDM login loader
.au-c-main-header__actions .u-padding--round--small {
  position: absolute;
  right: 0;
  max-width: 480px;
  top: $au-unit-large - $au-unit-tiny/2;
  padding: 0;
  background-color: $au-white;

  .loader-wrapper {
    padding: 0;
  }
}

/* ==========================================================================
  Tooltips
 ========================================================================== */

.au-c-tooltip-container {
  position: relative;
}

[role="tooltip"] {
  margin-top: $au-unit-small;
  position: absolute;
  display: none;
  transition: opacity $au-transition;
  color: $au-gray-700;
  background-color: $au-gray-200;
  padding: $au-unit-tiny $au-unit-small;
  border-radius: .3rem;
  z-index: 3;
  max-width: $au-unit * 10;
  opacity: 0;
  box-shadow: .5rem .5rem .5rem $au-gray-100;

  &:after {
    content: " ";
    position: absolute;
    top: -.5rem;
    left: $au-unit-small;
    width: 0;
    height: 0;
    border-left: .5rem solid transparent;
    border-right: .5rem solid transparent;
    border-bottom: .5rem solid $au-gray-200;
  }
}

.au-c-button.au-c-button--tooltip {
  position: relative;
  padding: $au-unit-tiny 0 0;
  color: $au-gray-700;
  border-bottom: 1px dotted $au-gray-700;

  &:hover + [role="tooltip"],
  &:focus + [role="tooltip"] {
    display: block;
    opacity: 1
  }
}

/* ==================================
  #IE 11 appuniversum fixes
  @TODO: update in appuniversum
  ================================== */

.au-c-alert__content {
  display: block;
}

div:focus,
span:focus,
table:focus,
td:focus {
  outline: 0 !important;
}

.checkbox + .au-c-label {
  display: inline-block;
}


/* ==================================
  Fix checkbox disabled state in alert
  ================================== */
.checkbox--disabled .checkbox__toggle+span {
  background-color: $au-gray-300;
}

/* ==================================
  Fix checkbox layout
  ================================== */

.au-c-checkbox + .au-c-label {
  display: inline-block;
  vertical-align: top;
}


/* ==================================
  Fix scrolling for sidebar
  ================================== */

.au-c-sidebar {
  overflow: hidden;
}

.au-c-sidebar__content {
  flex-grow: 2;
  overflow: auto;
}

.au-c-sidebar__footer {
  border-top: 1px solid $au-gray-300;
  flex-grow: 1;
}


/* ==================================
  Remove when mockups are gone
  ================================== */

.data-table tbody a.au-c-button,
a.au-c-button {
  text-decoration: none;

  &:visited:not(.au-c-button--secondary):not(.au-c-button--tertiary) {
    background-color: $au-blue-700;
    color: $white;
  }
}

/* ==================================
  Make sure long names in MARcode get broken off
  ================================== */

.ember-power-select-option {
  word-wrap : break-word;
}

/* ==================================
  Fix checkbox layout
  ================================== */

.au-c-checkbox + .au-c-label {
  display: inline-block;
  vertical-align: top;
}
